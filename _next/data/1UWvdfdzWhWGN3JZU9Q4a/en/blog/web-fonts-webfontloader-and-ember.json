{"pageProps":{"post":{"html":"<p>In this blog I'm doing one not so tricky, though not trivial thing, when I want to set a navigational indicator styling based on the current \"active\" route.</p>\n<p>While using the web fonts, font-based styling can become a challenge, especially if you need to do this on the page load.\nThe problem is that styling will be done based on the first rendered font before your custom fonts are loaded, so the end result will be wrong.</p>\n<p>Of course, you might try using timeouts, but this will not work as the long term solution. Basically as always :) My very first attempt was simply delaying styling by using timeouts, but when the network was slow, nothing worked as supposed to, so I decided to go with more robust solution.</p>\n<p><strong>Note</strong>: This solution will work only if the fonts you're going to use are from <a href=\"https://www.google.com/fonts\">Google Fonts</a> or <a href=\"http://www.typekit.com/\">Typekit</a> and some others, but not so many things are needed to be changed to use other webfonts providers.</p>\n<p>First of all you need to get <a href=\"https://github.com/typekit/webfontloader\"><strong>Web Font Loader</strong></a> script, which is \"co-developed by&nbsp;Google&nbsp;and&nbsp;<a href=\"http://www.typekit.com/\">Typekit</a>.\"</p>\n<p>WFL (Web Font Loader) README file says:</p>\n<blockquote>\n  <p>Web Font Loader gives you added control when using linked fonts via @font-face. It provides a common interface to loading fonts regardless of the source, then adds a standard set of events you may use to control the loading experience.</p>\n</blockquote>\n<p>After obtaining the script, you need to include it to your Ember-cli-build configuration:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// ember-cli-build.js</span>\n...\napp.<span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&#x27;vendor/webfontloader.js&#x27;</span>);\n...\n</code></pre>\n<p>Then we need to create a new initializer as we want this to happen only on the initial loading. So we can do this as usual: <code>ember generate initializer webfont-loader</code>.</p>\n<p>Then we may define a list of fonts that we can use for our appilication:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/initializers/webfont-loader.js</span>\n\n<span class=\"hljs-comment\">/* globals WebFont */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-title function_\">load</span>({\n        <span class=\"hljs-attr\">google</span>: {\n            <span class=\"hljs-comment\">// Here we can define our list of fonts.</span>\n            <span class=\"hljs-comment\">// To know how to use the WebFont loader please</span>\n            <span class=\"hljs-comment\">// check their documentation:</span>\n            <span class=\"hljs-comment\">// https://github.com/typekit/webfontloader</span>\n            <span class=\"hljs-attr\">families</span>: [<span class=\"hljs-string\">&#x27;Roboto Mono:400,500,700&#x27;</span>]\n        }\n    });\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;webfont-loader&#x27;</span>,\n  initialize\n};\n</code></pre>\n<p>That is basically it. The result of doing this will be a few events that you can use to do what you need.</p>\n<p>Unfortunatelly these events are just simple classes on your <code>&lt;html&gt;</code> element, but it's fairly enough to do what I needed: to set the width of the \"navigational indicator\".</p>\n<p>I'm using one more initializer to reopen the <code>Ember.Route</code> class and add more things to its <code>didTransition</code> actions:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Ember</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember&#x27;</span>;\n\n<span class=\"hljs-comment\">// this is not the best solution from design perspective,</span>\n<span class=\"hljs-comment\">// although is the easiest and the most comprehensive</span>\n<span class=\"hljs-keyword\">var</span> initialized = <span class=\"hljs-literal\">false</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (initialized) {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n    <span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-property\">Route</span>.<span class=\"hljs-title function_\">reopen</span>({\n        <span class=\"hljs-attr\">actions</span>: {\n            <span class=\"hljs-title function_\">didTransition</span>(<span class=\"hljs-params\"></span>) {\n                <span class=\"hljs-keyword\">let</span> areFontsLoaded = <span class=\"hljs-literal\">false</span>;\n                <span class=\"hljs-keyword\">let</span> page = <span class=\"hljs-title class_\">Ember</span>.$(<span class=\"hljs-string\">&#x27;html&#x27;</span>);\n\n                <span class=\"hljs-comment\">// Here I&#x27;m setting the styles of the indicator</span>\n                <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title function_\">setIndicator</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n                    <span class=\"hljs-keyword\">let</span> indicator = <span class=\"hljs-title class_\">Ember</span>.$(<span class=\"hljs-string\">&#x27;nav .active-indicator&#x27;</span>)[<span class=\"hljs-number\">0</span>];\n                    <span class=\"hljs-keyword\">let</span> activeLink = <span class=\"hljs-title class_\">Ember</span>.$(<span class=\"hljs-string\">&#x27;nav li a.active&#x27;</span>)[<span class=\"hljs-number\">0</span>];\n                    <span class=\"hljs-keyword\">if</span> (indicator &amp;&amp; activeLink) {\n                        indicator.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">left</span>  = activeLink.<span class=\"hljs-property\">offsetLeft</span> + <span class=\"hljs-string\">&#x27;px&#x27;</span>;\n                        indicator.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">width</span> = activeLink.<span class=\"hljs-property\">offsetWidth</span> + <span class=\"hljs-string\">&#x27;px&#x27;</span>;\n                    }\n                };\n\n                <span class=\"hljs-comment\">// And I&#x27;m doing this only when the fonts are loaded</span>\n                <span class=\"hljs-keyword\">if</span> (areFontsLoaded) {\n                    <span class=\"hljs-title function_\">setIndicator</span>();\n                } <span class=\"hljs-keyword\">else</span> {\n                 <span class=\"hljs-comment\">// Otherwise we check our &lt;html&gt; tag for wf-active</span>\n                    <span class=\"hljs-comment\">// class which is set when the fonts are loaded</span>\n                    <span class=\"hljs-keyword\">let</span> checker = <span class=\"hljs-built_in\">setInterval</span>(<span class=\"hljs-function\">() =&gt;</span> {\n                        <span class=\"hljs-keyword\">if</span> (page.<span class=\"hljs-title function_\">hasClass</span>(<span class=\"hljs-string\">&#x27;wf-active&#x27;</span>)) {\n                            areFontsLoaded = <span class=\"hljs-literal\">true</span>;\n                            <span class=\"hljs-title function_\">setIndicator</span>();\n                            <span class=\"hljs-built_in\">clearInterval</span>(checker);\n                        }\n                    }, <span class=\"hljs-number\">10</span>);\n                }\n\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n            }\n        }\n    });\n    initialized = <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;nav-indicator&#x27;</span>,\n  initialize\n};\n</code></pre>\n<p>That was a small example of the usefulness of Web Font Loader library and how to put it inside Ember application.</p>\n<p>Please let <a href=\"http://twitter.com/kuzzmi\">me know</a> if you have any questions or you have solved this problem in a different way.</p>\n<p><strong>UPDATE 20/02/2016</strong>: As per discussions in comments and suggestions from Ken and Andrey, I've published <a href=\"https://www.npmjs.com/package/ember-cli-webfontloader\">ember-cli-webfontloader</a> addon to avoid all that headache. You may use it, but anyway, I believe that this post is not just about solving one problem, but for showing you, how to solve one-time problems like that.</p>","type":"blog","meta":{"slug":"web-fonts-webfontloader-and-ember","title":"Web Fonts, WebFontLoader and Ember","layout":"post","lang":"en","description":"In this post I describe why it can be a good idea to use Web Font Loader library and how to use it with Ember application.\n","tags":["technology","javascript","tips","ember","fonts","web development"],"date":"2016-02-07T17:54:44Z"}},"_nextI18Next":{"initialI18nStore":{"en":{"common":{"common":{"name":"Igor Kuzmenko","version":"version","articleFooter":"If you enjoyed the reading, you can tip me <a href=\"https://fundof.me/kuzzmi?tip\" target=\"_blank\" rel=\"noreferrer\">here</a> ðŸ˜‰","articleNotAvailable":"This content is available only in Ukrainian."},"menu":{"home":"Home","blog":"Tech articles","thoughts":"Thoughts","podcast":"Podcast","projects":"Projects","about":"About me"},"home":{"meta":{"description":"Home page of Igor Kuzmenko"},"bio":"developer and tech entrepreneur","read":"Read","recents":"Recent publications","description":{"part_1":"Here I publish ","part_2":"my thoughts","part_3":" and ","part_4":" tech articles","part_5":". Avid Linux and vim user. Co-founder at "}},"blog":{"description":"Different findings in the tech world that I want to share with world."},"thoughts":{"description":"My thoughts about life and work in Ukrainian."},"about":{"body":"Hi ðŸ‘‹<br /><br />My name is Igor Kuzmenko. I love my wife, son, dog and cat. And I love making things up and making them real (but more often this doesn't happen).<br /><br />For a long time, my personal page seemed like an official paper with a bunch of clichÃ©s, so I got sick of it and turned it into something what feels more like me and my approach to life: a combination of lightness, aesthetics, some seriousness and humor (and modesty).<br /><br />I spend my spare time with my family, doing pet projects, playing video games and more: from playing the ukulele and drawing, to electrical engineering and sports car driving.<br /><br />I've tried countless times to increase my online presence, but it never lasts long ðŸ™ƒ<br /><br />My social networks and contacts are available here: <a href=\"https://fundof.me/igor\">fundof.me/igor</a>"}}}},"initialLocale":"en","userConfig":{"i18n":{"defaultLocale":"en","locales":["en","ua"]},"default":{"i18n":{"defaultLocale":"en","locales":["en","ua"]}}}}},"__N_SSG":true}