{"pageProps":{"post":{"html":"<p>In this post, I will try to explain how to handle situations when you need to use <a href=\"https://webpack.js.org/\">Webpack</a> with a lot of small apps that share one codebase.</p>\n<p>If you want to jump straight to the code, check out my <a href=\"https://github.com/kuzzmi/webpack-multiple-entries\">repository</a> on GitHub.</p>\n<p><strong>NOTE:</strong> Despite the fact that this happened to me already five times, I still consider this as a not typical case. Perhaps I was just <em>lucky</em>.</p>\n<h2 id=\"webpackisyourbro\">Webpack is your bro</h2>\n<p>After using <a href=\"http://gruntjs.com/\">Grunt</a> and <a href=\"http://gulpjs.com/\">Gulp</a> for building JavaScript apps for quite a while, I find them a little bit meh. If you ask me \"why?\" I won't be able to answer, though. Probably I don't have that good experience with them. Or I do…</p>\n<p>I can talk a lot about how awesome Webpack is, but to do this I need a whole new post, so let's focus on it and its configuration.</p>\n<p>Imagine that you have two main folders: <code>core</code> and <code>apps</code>; the <code>apps</code> folder contains 50 micro SAPs. To make things easier, we'll call them widgets. Each widget is grouped by domain, thus one more level of nesting.</p>\n<p>The folder structure may look like this, but it can be completely different:</p>\n<pre><code class=\"hljs\">~ <span class=\"hljs-attribute\">src</span>/\n  + core/                          &lt; where <span class=\"hljs-attribute\">all</span> reusable things are\n  ~ apps/                          &lt; microapps folder\n    ~ weather/\n      ~ temperature/\n          index<span class=\"hljs-selector-class\">.html</span>\n          index<span class=\"hljs-selector-class\">.js</span>                 &lt; entry point\n          App<span class=\"hljs-selector-class\">.js</span>\n          App<span class=\"hljs-selector-class\">.scss</span>\n          ListComponent<span class=\"hljs-selector-class\">.js</span>\n          ListComponent<span class=\"hljs-selector-class\">.scss</span>\n          ListComponent<span class=\"hljs-selector-class\">.spec</span><span class=\"hljs-selector-class\">.js</span>\n      + humidity/\n      + sunrise/\n    ~ news/\n      + feed/\n      + sport/\n</code></pre>\n<p>And that is what we want to get:</p>\n<pre><code class=\"hljs\">~ dist/\n  ~ weather/\n    ~ temperature/\n        index<span class=\"hljs-selector-class\">.html</span>\n        bundle<span class=\"hljs-selector-class\">.js</span>\n        bundle<span class=\"hljs-selector-class\">.css</span>\n    + humidity/\n    + sunrise/\n  + news/\n    vendor<span class=\"hljs-selector-class\">.js</span>\n    vendor<span class=\"hljs-selector-class\">.css</span>\n    core<span class=\"hljs-selector-class\">.js</span>\n    core<span class=\"hljs-selector-class\">.css</span>\n</code></pre>\n<h2 id=\"bundlingbundle\">Bundling bundle</h2>\n<p>The very first thing we need for bundling is to get a list of entry points. You can find <em>some</em> documentation about multiple entry points in Webpack <a href=\"https://webpack.github.io/docs/multiple-entry-points.html\">here</a>.</p>\n<p>In our case entry points are these multiple <code>index.js</code> files, from which your application starts functioning. Webpack's multiple entry points object follows:</p>\n<pre><code class=\"hljs\">{\n  entry: {\n    %path_to_result_file_name%: %path_to_entry_point%,\n    <span class=\"hljs-comment\">// or</span>\n    %path_to_result_file_name%: [\n      %path_to_entry_point_1%,\n      %path_to_entry_point_2%\n    ]\n  }\n}\n</code></pre>\n<p>Where <code>path_to_result_file_name</code> is a <em>path to the file</em> we want to get as a result of bundling and <code>path_to_entry_point</code> is a path to the file OR a module name which we want to bundle.</p>\n<p>For example, assume we have the following configuration:</p>\n<pre><code class=\"hljs\">{\n <span class=\"hljs-params\">...</span>\n    entry: {\n     <span class=\"hljs-string\">&#x27;./one/cool/stuff/bundle.js&#x27;</span>: <span class=\"hljs-string\">&#x27;./src/another/nested/folder/index.js&#x27;</span>\n    },\n    output: {\n        path: path.<span class=\"hljs-keyword\">join</span>(__dirname, <span class=\"hljs-string\">&#x27;dist&#x27;</span>),\n        filename: <span class=\"hljs-string\">&#x27;[name].js&#x27;</span>,\n    },\n    <span class=\"hljs-params\">...</span>\n}\n</code></pre>\n<p>The result of the <code>webpack</code> will be:</p>\n<pre><code class=\"hljs\">./\n~ dist\n  ~ one\n    ~ cool\n      ~ stuff\n          bundle<span class=\"hljs-selector-class\">.js</span>          &lt; bundled index<span class=\"hljs-selector-class\">.js</span> and App<span class=\"hljs-selector-class\">.js</span>\n~ <span class=\"hljs-attribute\">src</span>\n  ~ another\n    ~ nested\n      ~ folder\n          index<span class=\"hljs-selector-class\">.js</span>\n          App<span class=\"hljs-selector-class\">.js</span>             &lt; this file is requested from index<span class=\"hljs-selector-class\">.js</span>\nwebpack<span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span>\n</code></pre>\n<p>If you have a wtf-face, that's fine.</p>\n<p>In our case <code>[name]</code> was resolved as a <code>./one/cool/stuff/bundle.js</code>, the path relative to <code>path.join(__dirname, 'dist')</code>. So webpack has written a file to <code>path.join(__dirname, 'dist') + './one/cool/stuff/bundle.js'</code>, what will result in <code>/dist/./one/cool/stuff/bundle.js</code>.</p>\n<p>So, if we take our initial folder structure, then we can easily create the following entries:</p>\n<pre><code class=\"hljs\">{\n <span class=\"hljs-string\">...</span>\n entry: {\n     &#x27;<span class=\"hljs-string\">./apps/weather/temperature/bundle.js</span>&#x27;: &#x27;<span class=\"hljs-string\">./src/apps/weather/temperature/index.js</span>&#x27;\n        <span class=\"hljs-string\">...</span>\n    },\n    <span class=\"hljs-string\">...</span>\n}\n</code></pre>\n<p>Looks good and we already know what will be the result of running this.</p>\n<p>The bad part is that in this case, all the shared stuff from <code>core</code> and all the modules will be duplicated in each <code>bundle.js</code>. To solve this problem and leave these bundles as slim as possible, we should add one more entry point and utilize one plugin:</p>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-params\">...</span>\n  entry: {\n    <span class=\"hljs-string\">&#x27;./apps/weather/temperature/bundle.js&#x27;</span>: <span class=\"hljs-string\">&#x27;./src/apps/weather/temperature/index.js&#x27;</span>,\n    <span class=\"hljs-params\">...</span>,\n    <span class=\"hljs-string\">&#x27;vendor&#x27;</span>: <span class=\"hljs-meta\">[</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>, <span class=\"hljs-string\">&#x27;moment&#x27;</span>, <span class=\"hljs-params\">...</span> <span class=\"hljs-meta\">]</span>\n  },\n  plugins: <span class=\"hljs-meta\">[</span>\n    <span class=\"hljs-literal\">new</span> webpack.optimize.CommonsChunkPlugin(<span class=\"hljs-string\">&#x27;vendor&#x27;</span>, <span class=\"hljs-string\">&#x27;vendor.js&#x27;</span>),\n  <span class=\"hljs-meta\">]</span>\n  ...\n}\n</code></pre>\n<p>If we want to extract our <code>core</code>, we can write another entry point with name <code>core</code> and use CommonsChunkPlugin one more time. If you want to know more about this plugin, you can check <a href=\"https://webpack.github.io/docs/list-of-plugins.html#commonschunkplugin\">here</a>.</p>\n<p>Now we're done with bundling things, but there is always \"one more thing\".</p>\n<h2 id=\"hotmodulereplacementandreacthotloader\">Hot Module Replacement and React Hot Loader</h2>\n<p>I will not cover the whole Webpack Dev Server, <a href=\"https://webpack.github.io/docs/hot-module-replacement.html\">HMR</a>, and <a href=\"https://gaearon.github.io/react-hot-loader/\">React Hot Loader</a> thing.</p>\n<p>The only thing I'd like to tell here is what you need to do to get all that cool functionality working with a webpack config as we have made earlier.</p>\n<p>To start listening to the HMR plugin you have two options: use <code>--inline --hot</code>, kind of Live Reload thing, or add two more items to each entry point:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-symbol\">&#x27;./apps/weather/temperature/bundle.js</span><span class=\"hljs-symbol\">&#x27;:</span> [\n  <span class=\"hljs-symbol\">&#x27;./src/apps/weather/temperature/index.js</span>&#x27;,\n  <span class=\"hljs-symbol\">&#x27;webpack/hot/only-dev-server</span>&#x27;,\n  <span class=\"hljs-symbol\">&#x27;webpack-dev-server/client?http://localhost:8080</span>&#x27;\n]\n</code></pre>\n<p>Doing so enables HMR on each entry. But there is still one more thing to do. If you run Webpack Dev Server and try to change a file, you'll see, that HMR expects the changes chunk to be available from the current folder, e.g. <code>http://localhost:8080/apps/weather/temperature/[hash].hot-update.json</code>, what will result in 404 error because by <a href=\"https://github.com/webpack/webpack/blob/6b0c20a53ad7b04d4282a8a5c334ea0982fd364c/lib/WebpackOptionsDefaulter.js#L55\">default</a> Webpack does this:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;output.hotUpdateChunkFilename&quot;</span>, <span class=\"hljs-string\">&quot;[id].[hash].hot-update.js&quot;</span>);\n<span class=\"hljs-keyword\">this</span>.<span class=\"hljs-keyword\">set</span>(<span class=\"hljs-string\">&quot;output.hotUpdateMainFilename&quot;</span>, <span class=\"hljs-string\">&quot;[hash].hot-update.json&quot;</span>);\n</code></pre>\n<p>So the needed chunk is available from root path, not from the current directory. The default values are fine when you're developing one app. But while we're dealing with multiple apps, we need to override these settings by understanding where this chunk is:</p>\n<pre><code class=\"hljs\">{\n  <span class=\"hljs-string\">...</span>\n  output: {\n    <span class=\"hljs-string\">...</span>,\n    hotUpdateMainFilename: &#x27;<span class=\"hljs-string\">../../../</span>[hash]<span class=\"hljs-string\">.hot-update.json</span>&#x27;,\n    hotUpdateChunkFilename: &#x27;<span class=\"hljs-string\">../../../</span>[id].[hash]<span class=\"hljs-string\">.hot-update.js</span>&#x27;\n  }\n  <span class=\"hljs-string\">...</span>\n}\n</code></pre>\n<p>You can check all default values <a href=\"https://github.com/webpack/webpack/blob/6b0c20a53ad7b04d4282a8a5c334ea0982fd364c/lib/WebpackOptionsDefaulter.js\">here</a>.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>Don't forget to extract CSS.</p>\n<p>Instead of a conclusion, I'd like to say a few good words about Webpack.</p>\n<p>\"Just a tool\" is great when it does dull and predictable things well. \"The Tool\" is great when you can use it in uncommon cases.</p>\n<p>The JavaScript tooling was always kind of \"just a tool\" for me, but somehow Webpack managed to become my \"The Tool\" in a quite short period.</p>\n<p>Although the documentation is <em>meh</em>, I <strong>really</strong> encourage you to read the sources, so you'll get the whole picture of how it works and probably find more tricks.</p>\n<p>If you know better ways of handling such cases, I'd love to see them in the comments. And don't hesitate to share the post if you find it useful.</p>\n<hr />\n<h3 id=\"ps\">P.S.</h3>\n<p>Why when it comes to more or less complex cases, each and every tutorial/boilerplate/template project is focused on just simple things?</p>\n<p>One may say it's up to a developer to find out what to do with his own complicated case. I agree, but I find the fact, that you have close to none information about dealing with this kind of stuff, really disappointing.</p>\n<p>I doubt that single page applications are the only thing that people do with JavaScript.</p>\n<p>Argh…</p>\n<h2 id=\"update\">Update</h2>\n<p>I made an example project <a href=\"https://github.com/kuzzmi/webpack-multiple-entries\">on GitHub</a>. <a href=\"http://twitter.com/kuzzmi\">Let me know</a> if it's still unclear how to make things work.</p>","type":"blog","meta":{"slug":"truly-multiple-entries-with-webpack","title":"Truly Multiple Entries with Webpack","layout":"post","lang":"en","description":"In this post, I will try to explain how to handle situations when you need to use Webpack with a lot of small apps that share one codebase.\n","tags":["technology","react","javascript","web development","webpack","tips"],"date":"2016-06-29 15:16:15 +0200"}},"_nextI18Next":{"initialI18nStore":{"ua":{"common":{"common":{"name":"Ігор Кузьменко","version":"версія","articleFooter":"Сподобалась стаття? На чай можна лишити <a href=\"https://fundof.me/kuzzmi?tip\" target=\"_blank\" rel=\"noreferrer\">ось тут</a> 😉","articleNotAvailable":"Цей контент доступний тільки англійською мовою."},"menu":{"home":"Головна","blog":"Технічні статті","thoughts":"Роздуми","podcast":"Подкаст","projects":"Проєкти","about":"Про мене"},"home":{"meta":{"description":"Домашня сторінка Ігора Кузьменка"},"bio":"розробник та tech підприємець","read":"Читати","recents":"Останні дописи","description":{"part_1":"Тут я публікую ","part_2":"свої роздуми","part_3":" і ","part_4":" технічні статті","part_5":". Завзятий користувач Linux і vim. Співзасновник в "}},"blog":{"description":"Знахідки і всілякі цікавості, якими я захотів поділитися зі світом."},"thoughts":{"description":"Мої роздуми про життя і роботу."},"about":{"body":"Привіт, мене звуть Ігор Кузьменко. Я люблю свою жінку, сина, собаку та кота. А ще я люблю вигадувати різні штукенції і втілювати їх у життя (інколи це вдається, але частіше - ні).<br /><br />Достатньо довго моя персональна сторінка була схожа на резюме із купою кліше, мені це набридло і я перетворив її на щось, що більше схоже на мене і мій підхід до життя: поєднання легкості, естетики, деякої серйозності і гумору (і скромності).<br /><br />У вільний від роботи час я проводжу з родиною, займаюся пет-проєктами, граю у відео ігри і ще багато чого роблю: від гри на укулєлє і малювання, до електротехніки і спортивного керування автівкою.<br /><br />Я безліч разів намагався підвищити рівень своєї онлайн-присутності, проте це ніколи не триває довго 🙃<br /><br />Мої соціальні мережі і контакти доступні ось тут: <a href=\"https://fundof.me/igor\">fundof.me/igor</a>"},"tags":{"philosophy":"філософія","psychology":"психологія","story":"моя історія","marketing":"маркетинг","startup":"стартапи","bad advice":"шкідливі поради","career":"кар'єра","work":"робота","burn out":"вигоряння"}}},"en":{"common":{"common":{"name":"Igor Kuzmenko","version":"version","articleFooter":"If you enjoyed the reading, you can tip me <a href=\"https://fundof.me/kuzzmi?tip\" target=\"_blank\" rel=\"noreferrer\">here</a> 😉","articleNotAvailable":"This content is available only in Ukrainian."},"menu":{"home":"Home","blog":"Tech articles","thoughts":"Thoughts","podcast":"Podcast","projects":"Projects","about":"About me"},"home":{"meta":{"description":"Home page of Igor Kuzmenko"},"bio":"developer and tech entrepreneur","read":"Read","recents":"Recent publications","description":{"part_1":"Here I publish ","part_2":"my thoughts","part_3":" and ","part_4":" tech articles","part_5":". Avid Linux and vim user. Co-founder at "}},"blog":{"description":"Different findings in the tech world that I want to share with world."},"thoughts":{"description":"My thoughts about life and work in Ukrainian."},"about":{"body":"Hi 👋<br /><br />My name is Igor Kuzmenko. I love my wife, son, dog and cat. And I love making things up and making them real (but more often this doesn't happen).<br /><br />For a long time, my personal page seemed like an official paper with a bunch of clichés, so I got sick of it and turned it into something what feels more like me and my approach to life: a combination of lightness, aesthetics, some seriousness and humor (and modesty).<br /><br />I spend my spare time with my family, doing pet projects, playing video games and more: from playing the ukulele and drawing, to electrical engineering and sports car driving.<br /><br />I've tried countless times to increase my online presence, but it never lasts long 🙃<br /><br />My social networks and contacts are available here: <a href=\"https://fundof.me/igor\">fundof.me/igor</a>"}}}},"initialLocale":"ua","userConfig":{"i18n":{"defaultLocale":"en","locales":["en","ua"]},"default":{"i18n":{"defaultLocale":"en","locales":["en","ua"]}}}}},"__N_SSG":true}