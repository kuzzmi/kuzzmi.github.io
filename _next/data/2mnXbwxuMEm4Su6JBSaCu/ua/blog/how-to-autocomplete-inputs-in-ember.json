{"pageProps":{"post":{"html":"<p>A form is still one the most frequently used layers between user’s and company’s goals. Almost every time when we need some input from user, we need to show him a form. And users hate forms, they don’t want to fill all these boring fields and to think a lot about what to put where and so on.</p>\n<p>But we are front-end developers, aren’t we? We can help our valuable users!</p>\n<p>In this Ember.js tutorial I will cover a few steps how we can help a user to fill one type of fields: the autocomplete text input field.</p>\n<p>We will create an input field that will autocomplete tags for a blog post by providing a part of the name.</p>\n<p>Think about this field as an input for selecting tags for your post in your blog application, or an input where a user has to select recipients of his message.</p>\n<p>Hopefully now you understand what I mean. If so, let’s have some fun a learn how to do this!</p>\n<h1 id=\"gettingstarted\">Getting started</h1>\n<p>I hope, you’re already a bit familiar with Ember CLI. If not, you can check their official documentation <a href=\"http://ember-cli.com/user-guide/\">here</a>.</p>\n<p>First things first, we need a new app for our experiments:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\">ember <span class=\"hljs-keyword\">new</span> autocomplete-inputs\ncd autocomplete-inputs\n</code></pre>\n<h1 id=\"modelanddata\">Model and Data</h1>\n<p><em>If you're not familiar with models in Ember.js you can take a look a brief introduction to model <a href=\"https://guides.emberjs.com/v2.5.0/models/\"><strong>here</strong></a>.</em></p>\n<p>Now we need to prepare our model and have some data for it, so we can work with something.</p>\n<p>Let’s create a <code>Tag</code> model (we will start with tags):</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\">ember g model tag\n</code></pre>\n<p>Tag model will have only one property: name, so the model should look like this:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/models/tag.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">DS</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember-data&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-variable constant_\">DS</span>.<span class=\"hljs-property\">Model</span>.<span class=\"hljs-title function_\">extend</span>({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-variable constant_\">DS</span>.<span class=\"hljs-title function_\">attr</span>(<span class=\"hljs-string\">&#x27;string&#x27;</span>)\n});\n</code></pre>\n<p>Our next step will be to create http-mock (a mocked version of API endpoint) for development purposes.</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\">ember g http-mock tags\n</code></pre>\n<p>Modify the created endpoint to include some dummy data. Open <code>server/mocks/tags.js</code> file and find the first line that starts with tagsRouter.get and change this block to following:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// server/mocks/tags.js</span>\n...\ntagsRouter.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {\n  <span class=\"hljs-keyword\">var</span> tags = [{\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;emberjs&#x27;</span>\n  }, {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;webdev&#x27;</span>\n  }, {\n    <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;javascript&#x27;</span>\n  }];\n\n  res.<span class=\"hljs-title function_\">send</span>({\n    <span class=\"hljs-string\">&#x27;tags&#x27;</span>: tags\n  });\n});\n...\n</code></pre>\n<p>Next step is to generate a default adapter and change the default namespace of API.</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// application adapter</span>\nember g adapter application\n</code></pre>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/adapters/application.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">DS</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember-data&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-variable constant_\">DS</span>.<span class=\"hljs-property\">RESTAdapter</span>.<span class=\"hljs-title function_\">extend</span>({\n  <span class=\"hljs-attr\">namespace</span>: <span class=\"hljs-string\">&#x27;api&#x27;</span>\n});\n</code></pre>\n<p>Finally we can check if we set up everything correctly. In order to do that, let’s output the list of tags we receive from our API. For that we need to generate an application route and retrieve tags as model there:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-regexp\">//</span> Generating main route\nember g route application\n</code></pre>\n<p>Define a model for the new route as follows:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/routes/application.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Ember</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-property\">Route</span>.<span class=\"hljs-title function_\">extend</span>({\n  <span class=\"hljs-title function_\">model</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">store</span>.<span class=\"hljs-title function_\">findAll</span>(<span class=\"hljs-string\">&#x27;tag&#x27;</span>);\n  }\n});\n</code></pre>\n<p>And update a template to see if everything is working fine:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/templates/application.hbs</span>\n...\n&lt;ul&gt;\n  {{#each model <span class=\"hljs-keyword\">as</span> |tag|}}\n  &lt;li&gt;\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{{tag.name}}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n  &lt;/li&gt;\n  {{/each}}\n&lt;/ul&gt;\n</code></pre>\n<p>That was a long way, but after we run a command <code>ember serve</code> and after navigating to <code>http://localhost:4200</code>, we’ll see the list of our tags.</p>\n<p>Finally, we are ready and can start developing our awesome component!</p>\n<h1 id=\"developingacomponent\">Developing a component</h1>\n<p>Let’s move on and start developing our awesome component, you’re here because of this, right?</p>\n<p>The idea is to create a reusable component that will look in a template file like this: <code>{{autocomplete-input items=post.tags key=\"name\" model=\"tag\"}}</code>, where <code>items</code> will contains already selected items, <code>key</code> attribute will define a property that we’re looking for and finally <code>model</code> attribute will determine, what kind of a model we’re looking for.</p>\n<p>So let’s generate a component:</p>\n<pre class=\"bash language-bash\"><code class=\"hljs bash language-bash\">ember g component autocomplete-input\n</code></pre>\n<p>Awesome, let’s add the component to a main template file, so we can livereload and see our changes:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/templates/application.hbs</span>\n...\n{{autocomplete-input items=model.<span class=\"hljs-property\">tags</span> key=<span class=\"hljs-string\">&quot;name&quot;</span> model=<span class=\"hljs-string\">&quot;tag&quot;</span>}}\n</code></pre>\n<p>And change our route so it contains only a new property which is a container of selected tags:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/routes/application.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Ember</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-property\">Route</span>.<span class=\"hljs-title function_\">extend</span>({\n  <span class=\"hljs-title function_\">model</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">tags</span>: [] };\n  }\n});\n</code></pre>\n<p>Great, then we should move to the component and outline a template for it. First let’s define what we need:</p>\n<ul>\n<li>It has to display items already added to container</li>\n<li>It has to display a text input field</li>\n<li>It has to display found results for autocompletion</li>\n</ul>\n<p>Basic version will look like this:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/templates/components/autocomplete-input.js</span>\n&lt;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;autocomplete-input&quot;</span>&gt;\n  {{#each items <span class=\"hljs-keyword\">as</span> |item|}}\n  &lt;span <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;selected-item&quot;</span>&gt;{{item}}&lt;/span&gt;\n  {{/each}}\n\n  {{input type=<span class=\"hljs-string\">&quot;text&quot;</span>}}\n\n  {{#each foundItems <span class=\"hljs-keyword\">as</span> |item|}}\n  &lt;span <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;found-item&quot;</span>&gt;{{item}}&lt;/span&gt;\n  {{/each}}\n&lt;/div&gt;\n</code></pre>\n<p>What we need next? We need a search, of course, so we look for tags based on the value we typed into the input field. The search will be very basic in purpose of the tutorial.</p>\n<p>Let’s add a key-up listener to the input in a template:</p>\n<pre class=\"bash language-bash\"><code class=\"hljs bash language-bash\">{{input <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> key-up=<span class=\"hljs-string\">&quot;keyUp&quot;</span>}}\n</code></pre>\n<p>Now we need to outline our component javascript file and definitely add a function <code>keyUp()</code>:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/components/autocomplete-input.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Ember</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-property\">Component</span>.<span class=\"hljs-title function_\">extend</span>({\n  <span class=\"hljs-attr\">store</span>: <span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-property\">inject</span>.<span class=\"hljs-title function_\">service</span>(), <span class=\"hljs-comment\">// we will use Ember.store for search</span>\n  <span class=\"hljs-attr\">foundItems</span>: [], <span class=\"hljs-comment\">// we need to store found items</span>\n\n  <span class=\"hljs-title function_\">findItem</span>(<span class=\"hljs-params\">value</span>) {\n    <span class=\"hljs-comment\">// here we will send a request to API</span>\n    <span class=\"hljs-comment\">// to return us some items based on</span>\n    <span class=\"hljs-comment\">// passed value</span>\n  },\n\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-title function_\">keyUp</span>(<span class=\"hljs-params\">value</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">findItem</span>(value);\n    }\n  }\n});\n</code></pre>\n<p>Let’s focus now on <code>findItem()</code> function:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/components/autocomplete-input.js</span>\n...\n  <span class=\"hljs-title function_\">findItem</span>(<span class=\"hljs-params\">value</span>) {\n    <span class=\"hljs-comment\">// we get `store` service to search</span>\n    <span class=\"hljs-comment\">// we get `model` to know which model to query</span>\n    <span class=\"hljs-comment\">//    and `key` to narrow down a search to one attribute</span>\n    <span class=\"hljs-keyword\">const</span> { store, model, key } = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getProperties</span>(<span class=\"hljs-string\">&#x27;store&#x27;</span>, <span class=\"hljs-string\">&#x27;model&#x27;</span>, <span class=\"hljs-string\">&#x27;key&#x27;</span>);\n\n    <span class=\"hljs-keyword\">const</span> query = {};\n    query[key] = value;\n\n    <span class=\"hljs-comment\">// we query the data and set the results as ‘foundItems’</span>\n    store.<span class=\"hljs-title function_\">query</span>(model, query).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">items</span>) =&gt;</span> {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;foundItems&#x27;</span>, items);\n    });\n  }\n...\n</code></pre>\n<p>At the moment our mocked API endpoint doesn’t understand what we’re trying to do with this search. To fix that we need to add a basic filtering there:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// server/mocks/tags.js</span>\n  tagsRouter.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res</span>) {\n    <span class=\"hljs-keyword\">var</span> query = req.<span class=\"hljs-property\">query</span> || <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">var</span> tags = [{\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">1</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;emberjs&#x27;</span>\n    }, {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">2</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;codeschool&#x27;</span>\n    }, {\n      <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">3</span>,\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;javascript&#x27;</span>\n    }];\n\n    <span class=\"hljs-keyword\">var</span> filter = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">tag</span>) {\n      <span class=\"hljs-keyword\">if</span> (!query) { <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>; }\n      <span class=\"hljs-keyword\">return</span> tag.<span class=\"hljs-property\">name</span>.<span class=\"hljs-title function_\">indexOf</span>(query.<span class=\"hljs-property\">name</span>) !== -<span class=\"hljs-number\">1</span>;\n    };\n\n    res.<span class=\"hljs-title function_\">send</span>({\n      <span class=\"hljs-string\">&#x27;tags&#x27;</span>: tags.<span class=\"hljs-title function_\">filter</span>(filter)\n    });\n  });\n</code></pre>\n<p>We can try again and see, that Ember outputs everything but tag names. This is happening because we’re trying to show an internal Ember model, instead of a value. But because our key is dynamic we need to create a custom helper, very basic one, just to return a value of a passed object by a key. So in our case we need something like <code>{{output-value item key}}</code>:</p>\n<pre class=\"bash language-bash\"><code class=\"hljs bash language-bash\">// generate a helper\nember g helper output-value\n</code></pre>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/helpers/output-value.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Ember</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">outputValue</span>(<span class=\"hljs-params\">params</span>) {\n  <span class=\"hljs-keyword\">let</span> object = params[<span class=\"hljs-number\">0</span>],\n      key = params[<span class=\"hljs-number\">1</span>];\n\n  <span class=\"hljs-comment\">// just to be sure, that our helper will work as expected</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> object === <span class=\"hljs-string\">&#x27;object&#x27;</span> &amp;&amp; <span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">&#x27;string&#x27;</span>) {\n    <span class=\"hljs-keyword\">if</span> (object.<span class=\"hljs-property\">get</span>) { <span class=\"hljs-comment\">// we check whether the object is Ember object</span>\n      <span class=\"hljs-keyword\">return</span> object.<span class=\"hljs-title function_\">get</span>(key);\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">return</span> object[key];\n    }\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;output-value helper signature is output-value(Object, String)&#x27;</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-property\">Helper</span>.<span class=\"hljs-title function_\">helper</span>(outputValue);\n</code></pre>\n<p>Now let’s use this helper in our component’s template:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/templates/components/autocomplete-input.hbs</span>\n&lt;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;autocomplete-input&quot;</span>&gt;\n  {{#each items <span class=\"hljs-keyword\">as</span> |item|}}\n  &lt;span <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;selected-item&quot;</span>&gt;{{output-value item key}}&lt;/span&gt;\n  {{/each}}\n\n  {{input type=<span class=\"hljs-string\">&quot;text&quot;</span>}}\n\n  {{#each foundItems <span class=\"hljs-keyword\">as</span> |item|}}\n  &lt;span <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;found-item&quot;</span>&gt;{{output-value item key}}&lt;/span&gt;\n  {{/each}}\n&lt;/div&gt;\n</code></pre>\n<p>Now if we go and check our app. Congratulations!</p>\n<p>Next step is to add <code>add()</code> and <code>remove()</code> functions, so we can add our tags to the container. We may start from a template and add <code>{{ action ... }}</code> helper there first:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/templates/components/autocomplete-input.js</span>\n&lt;div <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;autocomplete-input&quot;</span>&gt;\n  {{#each items <span class=\"hljs-keyword\">as</span> |item|}}\n  &lt;span <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;selected-item&quot;</span> {{action <span class=\"hljs-string\">&quot;remove&quot;</span> item}}&gt;{{output-value item key}}&lt;/span&gt;\n  {{/each}}\n\n  {{input type=<span class=\"hljs-string\">&quot;text&quot;</span> key-up=<span class=\"hljs-string\">&quot;keyUp&quot;</span>}}\n\n  {{#each foundItems <span class=\"hljs-keyword\">as</span> |item|}}\n  &lt;span <span class=\"hljs-keyword\">class</span>=<span class=\"hljs-string\">&quot;found-item&quot;</span> {{action <span class=\"hljs-string\">&quot;add&quot;</span> item}}&gt;{{output-value item key}}&lt;/span&gt;\n  {{/each}}\n&lt;/div&gt;\n</code></pre>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/components/autocomplete-input.js</span>\n...\n  <span class=\"hljs-comment\">// If we have a container, we just add an item to it</span>\n  <span class=\"hljs-title function_\">addItem</span>(<span class=\"hljs-params\">item</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;items&#x27;</span>)) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;items&#x27;</span>).<span class=\"hljs-title function_\">addObject</span>(item);\n    }\n    <span class=\"hljs-comment\">// after adding an item, it’s a good idea to clear results</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&#x27;foundItems&#x27;</span>, []);\n  },\n  <span class=\"hljs-comment\">// If we have a container, we remove a passed item from it</span>\n  <span class=\"hljs-title function_\">removeItem</span>(<span class=\"hljs-params\">item</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;items&#x27;</span>)) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;items&#x27;</span>).<span class=\"hljs-title function_\">removeObject</span>(item);\n    }\n  },\n\n  <span class=\"hljs-attr\">actions</span>: {\n    <span class=\"hljs-comment\">// Remove item from the list of items</span>\n    <span class=\"hljs-title function_\">remove</span>(<span class=\"hljs-params\">item</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">removeItem</span>(item);\n    },\n\n    <span class=\"hljs-comment\">// Add item to the list of items</span>\n    <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">item</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addItem</span>(item);\n    },\n\n    <span class=\"hljs-title function_\">keyUp</span>(<span class=\"hljs-params\">value</span>) {\n    ...\n    }\n  }\n...\n</code></pre>\n<h1 id=\"congratulations\">Congratulations!</h1>\n<p>Voila! We have now a reusable autocomplete input, which you can use in your blog app, you finances app, any other application, that has some sort of an undefined set of defined values which we need to enter.</p>\n<p>Just add a bit of your imagination, some CSS and you will see something like this (trust me, this is absolutely the same component):</p>\n<h1 id=\"conclusion\">Conclusion</h1>\n<p>Of course this is just a beginning, you’ll need to add some logic to the <code>keyUp</code> method to prevent an empty search, you might want to add a normal <code>add</code> function, that will be able to add either a model, or create a model from value and add it, and so on. The list is very long if not endless. But you’ve done a huge and great job, if you’re reading these words, so let me congratulate you one more time.</p>","type":"blog","meta":{"slug":"how-to-autocomplete-inputs-in-ember","title":"How To: Autocomplete Inputs in Ember","layout":"post","lang":"en","description":"In this tutorial we will go through several basic things about Ember and create a reusable autocomplete input for your Ember project\n","tags":["technology","ember","web development","javascript"],"date":"2016-04-22T23:49:13Z"}},"_nextI18Next":{"initialI18nStore":{"ua":{"common":{"common":{"name":"Ігор Кузьменко","version":"версія","articleFooter":"Сподобалась стаття? На чай можна лишити <a href=\"https://fundof.me/kuzzmi?tip\" target=\"_blank\" rel=\"noreferrer\">ось тут</a> 😉","articleNotAvailable":"Цей контент доступний тільки англійською мовою."},"menu":{"home":"Головна","blog":"Технічні статті","thoughts":"Роздуми","podcast":"Подкаст","projects":"Проєкти","about":"Про мене"},"home":{"meta":{"description":"Домашня сторінка Ігора Кузьменка"},"bio":"розробник та tech підприємець","read":"Читати","recents":"Останні дописи","description":{"part_1":"Тут я публікую ","part_2":"свої роздуми","part_3":" і ","part_4":" технічні статті","part_5":". Завзятий користувач Linux і vim. Співзасновник в "}},"blog":{"description":"Знахідки і всілякі цікавості, якими я захотів поділитися зі світом."},"thoughts":{"description":"Мої роздуми про життя і роботу."},"about":{"body":"Привіт, мене звуть Ігор Кузьменко. Я люблю свою дружину, сина, собаку та кота. А ще я люблю вигадувати різні штукенції і втілювати їх у життя (інколи це вдається, але частіше - ні).<br /><br />Достатньо довго моя персональна сторінка була схожа на резюме із купою кліше, мені це набридло і я перетворив її на щось, що більше схоже на мене і мій підхід до життя: поєднання легкості, естетики, деякої серйозності і гумору (і скромності).<br /><br />У вільний від роботи час я проводжу з родиною, займаюся пет-проєктами, граю у відео ігри і ще багато чого роблю: від гри на укулєлє і малювання, до електротехніки і спортивного керування автівкою.<br /><br />Я безліч разів намагався підвищити рівень своєї онлайн-присутності, проте це ніколи не триває довго 🙃<br /><br />Мої соціальні мережі і контакти доступні ось тут: <a href=\"https://fundof.me/igor\">fundof.me/igor</a>"},"tags":{"philosophy":"філософія","psychology":"психологія","story":"моя історія","marketing":"маркетинг","startup":"стартапи","bad advice":"шкідливі поради","career":"кар'єра","work":"робота","burn out":"вигоряння"}}},"en":{"common":{"common":{"name":"Igor Kuzmenko","version":"version","articleFooter":"If you enjoyed the reading, you can tip me <a href=\"https://fundof.me/kuzzmi?tip\" target=\"_blank\" rel=\"noreferrer\">here</a> 😉","articleNotAvailable":"This content is available only in Ukrainian."},"menu":{"home":"Home","blog":"Tech articles","thoughts":"Thoughts","podcast":"Podcast","projects":"Projects","about":"About me"},"home":{"meta":{"description":"Home page of Igor Kuzmenko"},"bio":"developer and tech entrepreneur","read":"Read","recents":"Recent publications","description":{"part_1":"Here I publish ","part_2":"my thoughts","part_3":" and ","part_4":" tech articles","part_5":". Avid Linux and vim user. Co-founder at "}},"blog":{"description":"Different findings in the tech world that I want to share with world."},"thoughts":{"description":"My thoughts about life and work in Ukrainian."},"about":{"body":"Hi 👋<br /><br />My name is Igor Kuzmenko. I love my wife, son, dog and cat. And I love making things up and making them real (but more often this doesn't happen).<br /><br />For a long time, my personal page seemed like an official paper with a bunch of clichés, so I got sick of it and turned it into something what feels more like me and my approach to life: a combination of lightness, aesthetics, some seriousness and humor (and modesty).<br /><br />I spend my spare time with my family, doing pet projects, playing video games and more: from playing the ukulele and drawing, to electrical engineering and sports car driving.<br /><br />I've tried countless times to increase my online presence, but it never lasts long 🙃<br /><br />My social networks and contacts are available here: <a href=\"https://fundof.me/igor\">fundof.me/igor</a>"}}}},"initialLocale":"ua","userConfig":{"i18n":{"defaultLocale":"en","locales":["en","ua"]},"default":{"i18n":{"defaultLocale":"en","locales":["en","ua"]}}}}},"__N_SSG":true}