{"pageProps":{"post":{"html":"<p>If you've ever used <a href=\"https://elm-lang.org/\">Elm</a>, you might already know that it makes your code free\n(<em>almost</em>) of runtime errors, which are quite common in JavaScript\napplications.</p>\n<p>If you haven't, then go check it out, it's awesome and there is no way back.\nOnce you felt this taste of functional programming language that's tailored to\nfix all issues we've ever had with JavaScript, you won't be able to unsee it.</p>\n<h2 id=\"motivation\">Motivation</h2>\n<p>After creating a bunch of applications with Elm, you start missing some\nincredibly awesome features like pattern matching, strict type checking,\nsomewhat complete functional programming experience.</p>\n<p>Some principles from <a href=\"https://guide.elm-lang.org/architecture/\">The Elm Architecture</a> were taken as a basis for one of\nthe most popular libraries for JavaScript, an awesome state managing library,\n<a href=\"https://redux.js.org/\">Redux</a>. And when you have any Elm experience, you start missing error messages\nthat you haven't implemented some message in an <code>update</code> function, or that you\nforgot to update a handful of functions after some refactoring.</p>\n<p>When I started working on a new project a year ago, I made a decision to use\nElm in combination with <a href=\"https://reactjs.org/\">React</a>, <a href=\"https://facebook.github.io/react-native/\">React Native</a> and <a href=\"https://redux.js.org/\">Redux</a>. The main reason\nwas that React components were easily reused for web and mobile, and Elm\ncould protect the application from runtime exceptions and from potential\npainful refactorings, that are inevitable in every startup.</p>\n<p>So the basic idea is that you can write Redux reducer in Elm and use all nifty\nlibraries and components available for React and React Native.</p>\n<p>When I was looking for my options I found a <a href=\"https://github.com/cureous/redux-elm-middleware\">library</a> called\n<strong>redux-elm-middleware</strong>. The original repo was abandoned and after some time I\njust forked it, fixed a bunch of bugs, added a couple of nice features and a\nyear later would like to give you a brief intro to how to make your life\nawesome.</p>\n<h2 id=\"howitworks\">How It Works</h2>\n<p>Elm supports basic interoperability with JavaScript using\n<a href=\"https://guide.elm-lang.org/interop/javascript.html\">ports</a>. The basic idea behind ports is that you can define\nsenders and listeners that will create a \"bridge\" between JS and Elm. These\nports are available through <code>Elm.ports</code> object in JavaScript.</p>\n<p>Senders, ports that send data from Elm, have <code>subscribe</code> method in JavaScript,\nand listeners, ports that receive data in Elm, have <code>send</code> method in\nJavaScript.</p>\n<p><strong>redux-elm-middleware</strong> looks for available ports and depending on which port\nis triggered, or which Redux action is dispatched, passes it further to other\nreducers, or to Elm Reducer, accordingly.</p>\n<h2 id=\"example\">Example</h2>\n<p>Setting up <strong>redux-elm-middleware</strong> is fairly easy procedure:</p>\n<pre class=\"js language-js\"><code class=\"hljs js language-js\"><span class=\"hljs-comment\">// createStore.js</span>\n<span class=\"hljs-comment\">// or anywhere where you define your store</span>\n<span class=\"hljs-keyword\">import</span> { createStore, applyMiddleware, combineReducers } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;redux&#x27;</span>;\n\n<span class=\"hljs-keyword\">import</span> createElmMiddleware, { reducer <span class=\"hljs-keyword\">as</span> elmReducer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@cureous/redux-elm-middleware&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Elm</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./elm/Reducer.elm&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> elmWorker = <span class=\"hljs-title class_\">Elm</span>.<span class=\"hljs-property\">Reducer</span>.<span class=\"hljs-title function_\">worker</span>();\n<span class=\"hljs-keyword\">const</span> { run <span class=\"hljs-keyword\">as</span> runElmWorker, elmMiddleware } = <span class=\"hljs-title function_\">createElmMiddleware</span>(elmWorker);\n\n<span class=\"hljs-keyword\">const</span> reducer = <span class=\"hljs-title function_\">combineReducers</span>({\n    <span class=\"hljs-attr\">elm</span>: elmReducer,\n});\n\n<span class=\"hljs-keyword\">const</span> store = <span class=\"hljs-title function_\">createStore</span>(\n    reducer,\n    {},\n    <span class=\"hljs-title function_\">applyMiddleware</span>(elmMiddleware),\n);\n\n<span class=\"hljs-title function_\">runElmWorker</span>(store);\n</code></pre>\n<p>Then you need to create <code>./elm/Reducer.elm</code> file with the <code>Redux.program</code> as an\nentry point:</p>\n<pre class=\"elm language-elm\"><code class=\"hljs elm language-elm\"><span class=\"hljs-comment\">-- ./elm/Reducer.elm</span>\n<span class=\"hljs-keyword\">port</span> <span class=\"hljs-keyword\">module</span> Reducer <span class=\"hljs-keyword\">exposing</span> (..)\n\n\n<span class=\"hljs-keyword\">import</span> Json.Encode <span class=\"hljs-keyword\">as</span> Json\n<span class=\"hljs-keyword\">import</span> Redux\n\n\n<span class=\"hljs-comment\">-- This is a listener port</span>\n<span class=\"hljs-keyword\">port</span> increment : ({} -&gt; msg) -&gt; Sub msg\n\n\nsubscriptions : State -&gt; Sub Msg\nsubscriptions _ =\n    Sub.batch\n        [ increment &lt;| always Increment\n        ]\n\n<span class=\"hljs-comment\">-- State definition</span>\ntype alias State =\n    { counter : Int }\n\n\n<span class=\"hljs-comment\">-- Initial state</span>\ninitState : State\ninitState =\n    { counter = 0 }\n\n\n<span class=\"hljs-comment\">-- This encoder will be used to send your state to Redux</span>\nencode : State -&gt; Json.Value\nencode state =\n    Json.object\n        [ ( &quot;counter&quot;, <span class=\"hljs-type\">Json</span>.int state.counter )\n        ]\n\n\n<span class=\"hljs-comment\">-- Messages that we need to handle in update function</span>\ntype Msg\n    = Increment\n\n\n<span class=\"hljs-comment\">-- That is essentially a reducer</span>\nupdate : Msg -&gt; State -&gt; ( <span class=\"hljs-type\">State</span>, <span class=\"hljs-type\">Cmd</span> <span class=\"hljs-type\">Msg</span> )\nupdate action state =\n    case action of\n        Increment -&gt;\n            ( { state | counter = state.counter + 1 }\n            , <span class=\"hljs-type\">Cmd</span>.none\n            )\n\nmain =\n    Redux.program\n        { init = ( initState, <span class=\"hljs-type\">Cmd</span>.none )\n        , update = update\n        , encode = encode\n        , subscriptions = subscriptions\n        }\n</code></pre>\n<p>The latest version, v6.0.0, allows to send data back from Elm to Redux, what\nmakes it easy to write simple middlewares that can wire together different\nlibraries with Elm, like <code>react-router</code>. I will include an example of using\nthis middleware and <code>react-router</code> in the upcoming post.</p>","type":"blog","meta":{"slug":"use-elm-as-a-reducer-in-redux","title":"Use Elm as a Reducer in Redux","layout":"post","lang":"en","description":"Want to use Elm in your project, but a bit hesitant going cold turkey? In this blog post I'll try to show how you can use the best from both worlds bulletproof Elm logic and ridiculously rich React components library.\n","tags":["technology","react","redux","web development","javascript","elm"],"date":"2018-07-28T22:53:59Z"}},"_nextI18Next":{"initialI18nStore":{"en":{"common":{"common":{"name":"Igor Kuzmenko","version":"version","articleFooter":"If you enjoyed the reading, you can tip me <a href=\"https://fundof.me/kuzzmi?tip\" target=\"_blank\" rel=\"noreferrer\">here</a> ðŸ˜‰","articleNotAvailable":"This content is available only in Ukrainian."},"menu":{"home":"Home","blog":"Tech articles","thoughts":"Thoughts","podcast":"Podcast","projects":"Projects","about":"About me"},"home":{"meta":{"description":"Home page of Igor Kuzmenko"},"bio":"developer and tech entrepreneur","read":"Read","recents":"Recent publications","description":{"part_1":"Here I publish ","part_2":"my thoughts","part_3":" and ","part_4":" tech articles","part_5":". Avid Linux and vim user. Co-founder at "}},"blog":{"description":"Different findings in the tech world that I want to share with world."},"thoughts":{"description":"My thoughts about life and work in Ukrainian."},"about":{"body":"Hi ðŸ‘‹<br /><br />My name is Igor Kuzmenko. I love my wife, son, dog and cat. And I love making things up and making them real (but more often this doesn't happen).<br /><br />For a long time, my personal page seemed like an official paper with a bunch of clichÃ©s, so I got sick of it and turned it into something what feels more like me and my approach to life: a combination of lightness, aesthetics, some seriousness and humor (and modesty).<br /><br />I spend my spare time with my family, doing pet projects, playing video games and more: from playing the ukulele and drawing, to electrical engineering and sports car driving.<br /><br />I've tried countless times to increase my online presence, but it never lasts long ðŸ™ƒ<br /><br />My social networks and contacts are available here: <a href=\"https://fundof.me/igor\">fundof.me/igor</a>"}}}},"initialLocale":"en","userConfig":{"i18n":{"defaultLocale":"en","locales":["en","ua"]},"default":{"i18n":{"defaultLocale":"en","locales":["en","ua"]}}}}},"__N_SSG":true}