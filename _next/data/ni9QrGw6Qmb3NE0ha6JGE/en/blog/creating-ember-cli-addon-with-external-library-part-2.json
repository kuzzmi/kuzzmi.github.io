{"pageProps":{"post":{"html":"<p>In my <a href=\"/blog/creating-ember-cli-addon-with-external-library-part-2\">previous post</a> I covered basics about how to wrap the third-party library in <a href=\"http://www.ember-cli.com\">Ember CLI</a> addon, so it can be reusable, and used in Ember-way.</p>\n<p><strong>Note</strong>: This article will cover only a few issues that you might face during addon development, so I wouldn't say that it's a tutorial.</p>\n<p>In this part I will try to finish the <a href=\"https://github.com/kuzzmi/ember-cli-webfontloader\">ember-cli-webfontloader</a> addon by doing following:</p>\n<ul>\n<li>trying to find a nice solution of managing weird WebFontLoader's event system logic</li>\n<li>restructuring the addon to isolate it a bit more</li>\n</ul>\n<h2 id=\"problem\">Problem</h2>\n<p>After reading the <a href=\"https://github.com/typekit/webfontloader\">WebFontLoader</a> docs, I found that they are using probably the strangest event system you can find out there. The problem is that you need to use either a global variable or you need to pass configuration directly to <code>.load()</code> function which we use to load fonts.</p>\n<p>In our case, we want the configuration to contain only the fonts we want to load, so we need to find a way of having something more flexible.</p>\n<p>My first idea was to create a service that will attach its generic functions to configuration object, which will call our \"real\" event callbacks on event. But unfortunately this idea failed after a few atempts as I couldn't find a way of injecting a service to initializer, so I decided to go a bit lame way, I decided to extend <code>WebFont</code> object.</p>\n<p>We need to track somehow the state of WebFontLoader, add event handlers and if the event is already active (such as <code>active</code>, <code>loading</code> etc.) we need to be able to run the callback immediately. I will implement two functions: <code>on(string event, function callback, boolean runIfActive)</code> and <code>off(string event, function callback)</code>.</p>\n<p>Idea is such that <code>on()</code> function will add callbacks to the list and when an event is fired, the main event handler will execute all callbacks from the appropriate list.</p>\n<p>The full list of events is:</p>\n<ul>\n<li>loading</li>\n<li>active</li>\n<li>inactive</li>\n<li>fontloading</li>\n<li>fontactive</li>\n<li>fontinactive</li>\n</ul>\n<p>Here I will focus on covering the first three events: loading, active, inactive.</p>\n<h2 id=\"solution\">Solution</h2>\n<p>Let's outline the extension to the library:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// ember-cli-webfontloader/app/initializers/ember-cli-webfontloader.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\">...</span>) {\n  ...\n  <span class=\"hljs-keyword\">let</span> events = {\n      <span class=\"hljs-comment\">// current state of WebFontLoader</span>\n      <span class=\"hljs-attr\">state</span>: <span class=\"hljs-literal\">null</span>,\n\n      <span class=\"hljs-comment\">// Collection of callback functions to be called</span>\n      <span class=\"hljs-comment\">// when the appropriate event is fired</span>\n      <span class=\"hljs-attr\">eventHandlers</span>: {\n          <span class=\"hljs-attr\">active</span>: [],\n          <span class=\"hljs-attr\">inactive</span>: [],\n          <span class=\"hljs-attr\">loading</span>: [],\n      },\n\n      <span class=\"hljs-comment\">// Real `active` callback</span>\n      <span class=\"hljs-title function_\">onActive</span>(<span class=\"hljs-params\"></span>) {  events.<span class=\"hljs-property\">state</span> = <span class=\"hljs-string\">&#x27;active&#x27;</span>; },\n\n      <span class=\"hljs-comment\">// Real `inactive` callback</span>\n      <span class=\"hljs-title function_\">onInactive</span>(<span class=\"hljs-params\"></span>) {  events.<span class=\"hljs-property\">state</span> = <span class=\"hljs-string\">&#x27;inactive&#x27;</span>; },\n\n      <span class=\"hljs-comment\">// Real `loading` callback</span>\n      <span class=\"hljs-title function_\">onLoading</span>(<span class=\"hljs-params\"></span>) {  events.<span class=\"hljs-property\">state</span> = <span class=\"hljs-string\">&#x27;loading&#x27;</span>; }\n  };\n  ...\n}\n</code></pre>\n<p>To extend the plugin in a good manner, we need to have some sort of an isolated container. Let's call ours <code>__events__</code>:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// ember-cli-webfontloader/app/initializers/ember-cli-webfontloader.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\">...</span>) {\n  ...\n  <span class=\"hljs-comment\">// Extending WebFont</span>\n  <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-property\">__events__</span> = events;\n  ...\n}\n</code></pre>\n<p>And let's define our <code>on()</code> function directly on the <code>WebFont</code> object so in can be accessable from outer world:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// ember-cli-webfontloader/app/initializers/ember-cli-webfontloader.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\">...</span>) {\n  ...\n  <span class=\"hljs-comment\">// Adds a callback to the eventHandlers[event] list and</span>\n  <span class=\"hljs-comment\">// if &quot;toRun&quot; is true and the current state is event name,</span>\n  <span class=\"hljs-comment\">// we need to run callback function after we add it to the list</span>\n  <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-property\">on</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">event, callback, toRun</span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// Adding new handler to the list</span>\n    <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-property\">__events__</span>.<span class=\"hljs-property\">eventHandlers</span>[event].<span class=\"hljs-title function_\">push</span>(callback);\n\n    <span class=\"hljs-comment\">// Checking if we should run it now</span>\n    <span class=\"hljs-keyword\">if</span> (toRun &amp;&amp; event === <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-property\">__events__</span>.<span class=\"hljs-property\">state</span>) {\n        <span class=\"hljs-title function_\">callback</span>();\n    }\n  };\n  ...\n}\n</code></pre>\n<p>Cool, looks promising. Now we need to attach these <code>onActive</code>, <code>onInactive</code> and <code>onLoading</code> functions to the WebFontLoader configuration object.</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// ember-cli-webfontloader/app/initializers/ember-cli-webfontloader.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\">...</span>) {\n    ...\n <span class=\"hljs-comment\">// Getting all font families that should be loaded from</span>\n    <span class=\"hljs-comment\">// configuration</span>\n    <span class=\"hljs-keyword\">let</span> config = <span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable constant_\">ENV</span>, <span class=\"hljs-string\">&#x27;webFontConfig&#x27;</span>) || {};\n\n    config.<span class=\"hljs-property\">loading</span> = events.<span class=\"hljs-property\">onLoading</span>;\n    config.<span class=\"hljs-property\">active</span> = events.<span class=\"hljs-property\">onActive</span>;\n    config.<span class=\"hljs-property\">inactive</span> = events.<span class=\"hljs-property\">onInactive</span>;\n\n    <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-title function_\">load</span>(config);\n    ...\n}\n</code></pre>\n<p>After these steps we can inject the <code>WebFont</code> object to the component/route/whatever and do the following:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// ember-cli-webfontloader/tests/dummy/app/routes/application.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Ember</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">WebFont</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;webfontloader&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-property\">Route</span>.<span class=\"hljs-title function_\">extend</span>({\n    <span class=\"hljs-attr\">actions</span>: {\n        <span class=\"hljs-title function_\">didTransition</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;inactive&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;inactive!&#x27;</span>);\n            }, <span class=\"hljs-literal\">true</span>);\n            <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;loading&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;loading!&#x27;</span>);\n            }, <span class=\"hljs-literal\">true</span>);\n            <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&#x27;active&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n                <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;active!&#x27;</span>);\n            }, <span class=\"hljs-literal\">true</span>);\n        }\n    }\n});\n</code></pre>\n<p>By doing this we will create event handlers that will be executed on each of three events we covered here: loading, active, inactive.</p>\n<h2 id=\"goodpractice\">Good Practice</h2>\n<p>As some of you could notice, we're injecting our initializer directly to the application namespace, which is not a good idea, let's keep our application namespace for an application.</p>\n<p>We'll create a new file <code>addon/initializers/ember-cli-webfontloader.js</code> and copy the contents of the according file from <code>app/</code> folder and switch from exporting an initializer to export a function that will accept a configuration file, to which we have access only from <code>app</code> namespace:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// addon/initializers/ember-cli-webfontloader.js</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">WebFont</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;webfontloader&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">setupWebFont</span>(<span class=\"hljs-params\">config</span>) {\n    <span class=\"hljs-comment\">// Extending WebFont</span>\n    <span class=\"hljs-keyword\">let</span> events = {\n        ...\n    };\n\n    <span class=\"hljs-comment\">// Setting up our functions</span>\n    config.<span class=\"hljs-property\">loading</span>      = events.<span class=\"hljs-property\">onLoading</span>;\n    config.<span class=\"hljs-property\">active</span>       = events.<span class=\"hljs-property\">onActive</span>;\n    config.<span class=\"hljs-property\">inactive</span>     = events.<span class=\"hljs-property\">onInactive</span>;\n    config.<span class=\"hljs-property\">fontloading</span>  = events.<span class=\"hljs-property\">onFontloading</span>;\n    config.<span class=\"hljs-property\">fontactive</span>   = events.<span class=\"hljs-property\">onFontactive</span>;\n    config.<span class=\"hljs-property\">fontinactive</span> = events.<span class=\"hljs-property\">onFontinactive</span>;\n\n    <span class=\"hljs-comment\">// Load with an updated configuration</span>\n    <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-title function_\">load</span>(config);\n}\n</code></pre>\n<p>After doing that we still need to export an initializer to <code>app</code> namespace, but we'll do this more gently:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// app/initializers/ember-cli-webfontloader.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Ember</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../config/environment&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> setupWebFont <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember-cli-webfontloader/initializers/ember-cli-webfontloader&#x27;</span>;\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;ember-cli-webfontloader&#x27;</span>,\n    <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable constant_\">ENV</span>, <span class=\"hljs-string\">&#x27;webFontConfig&#x27;</span>) || {};\n        <span class=\"hljs-title function_\">setupWebFont</span>(config);\n    }\n};\n</code></pre>\n<p>Ok, that's it, we keep our <em>actual</em> initializer in <code>addon/</code> folder and here we just pass environment configuration.</p>\n<p>Done.</p>\n<p>If you have any comments and/or found some lame mistakes here, please let <a href=\"http://twitter.com/kuzzmi\">me know</a>.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li><a href=\"https://github.com/kuzzmi/ember-cli-webfontloader\">ember-cli-webfontloader - GitHub</a> (here you can find sources of the plugin)</li>\n<li><a href=\"https://github.com/typekit/webfontloader\">WebFontLoader - GitHub</a></li>\n</ul>","type":"blog","meta":{"slug":"creating-ember-cli-addon-with-external-library-part-2","title":"Creating Ember CLI Addon with External Library. Part 2","layout":"post","lang":"en","description":"In this post we will finish development of ember-cli-webfontloader addon and I will describe some issues you might experience during addon development, so you can gain some experience of solving those by reading.\n","tags":["technology","ember","javascript","tutorial"],"date":"2016-02-20T13:58:16Z"}},"_nextI18Next":{"initialI18nStore":{"en":{"common":{"common":{"name":"Igor Kuzmenko","version":"version","articleFooter":"If you enjoyed the reading, you can tip me <a href=\"https://fundof.me/kuzzmi?tip\" target=\"_blank\" rel=\"noreferrer\">here</a> 😉","articleNotAvailable":"This content is available only in Ukrainian."},"menu":{"home":"Home","blog":"Tech articles","thoughts":"Thoughts","podcast":"Podcast","projects":"Projects","about":"About me"},"home":{"meta":{"description":"Home page of Igor Kuzmenko"},"bio":"developer and tech entrepreneur","read":"Read","recents":"Recent publications","description":{"part_1":"Here I publish ","part_2":"my thoughts","part_3":" and ","part_4":" tech articles","part_5":". Avid Linux and vim user. Co-founder at "}},"blog":{"description":"Different findings in the tech world that I want to share with world."},"thoughts":{"description":"My thoughts about life and work in Ukrainian."},"about":{"body":"Hi 👋<br /><br />My name is Igor Kuzmenko. I love my wife, son, dog and cat. And I love making things up and making them real (but more often this doesn't happen).<br /><br />For a long time, my personal page seemed like an official paper with a bunch of clichés, so I got sick of it and turned it into something what feels more like me and my approach to life: a combination of lightness, aesthetics, some seriousness and humor (and modesty).<br /><br />I spend my spare time with my family, doing pet projects, playing video games and more: from playing the ukulele and drawing, to electrical engineering and sports car driving.<br /><br />I've tried countless times to increase my online presence, but it never lasts long 🙃<br /><br />My social networks and contacts are available here: <a href=\"https://fundof.me/igor\">fundof.me/igor</a>"}}}},"initialLocale":"en","userConfig":{"i18n":{"defaultLocale":"en","locales":["en","ua"]},"default":{"i18n":{"defaultLocale":"en","locales":["en","ua"]}}}}},"__N_SSG":true}