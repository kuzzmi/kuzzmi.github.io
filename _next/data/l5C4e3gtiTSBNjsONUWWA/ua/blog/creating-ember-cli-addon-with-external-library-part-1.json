{"pageProps":{"post":{"html":"<p>In the comments section to my previous [post][post] Ken Snyder suggested to wrap the [WebFontLoader][wfl] library in [Ember CLI][ecli] addon. That is definitely a good idea because using [WebFontLoader][wfl] is a wise solution when it comes to loading web fonts and detecting whether the font is loaded or not.</p>\n<p>So let's try to make this addon together.</p>\n<p>First things first, let's create an outline of what our addon has to do:</p>\n<ol>\n<li>It has to load fonts</li>\n<li>It has to allow using WebFontLoader events system</li>\n</ol>\n<p><strong>Note</strong>: This tutorial will teach you only the basics that you need to wrap your favorite library in ember addon. So in this part I will cover only the first item from the list.</p>\n<h2 id=\"preparation\">Preparation</h2>\n<p>To start developing our addon we need to generate a basic addon structure, to do that we need to execute:</p>\n<pre><code class=\"hljs\">ember addon ember-<span class=\"hljs-keyword\">cli</span>-webfontloader\n</code></pre>\n<p>After a few moments ember-cli will create a folder structure with all necessary files and initiate <code>bower install</code> and <code>npm install</code>. After that you'll have a basic \\\"do nothing\\\" addon sources.</p>\n<p>As you may know, <a href=\"http://emberjs.org\">Ember</a> follows the “convention over configuration”, the same does Ember CLI, this is why you may find the generated structure pretty familiar:</p>\n<pre><code class=\"hljs\">|<span class=\"hljs-string\">~ember-cli-webfontloader/\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">+.git/\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">+addon/\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">+app/\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">+bower_components/\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">+config/\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">+node_modules/\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">+tests/\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">+tmp/\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">+vendor/\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-.bowerrc\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-.editorconfig\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-.ember-cli\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-.gitignore\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-.jshintrc\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-.npmignore\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-.travis.yml\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-.watchmanconfig\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-bower.json\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-ember-cli-build.js\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-index.js\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-LICENSE.md\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-package.json\n</span>|<span class=\"hljs-string\"> </span>|<span class=\"hljs-string\">-README.md\n</span>|<span class=\"hljs-string\"> `-testem.json\n</span></code></pre>\n<p><strong>Note</strong>: Unfortunately, at the time of writing this post, the latest version of <a href=\"http://emberjs.org\">Ember</a> (2.3.1) has a bug, related to the new version of <a href=\"http://jquery.com\">jQuery</a> (1.12). Ember is not able to handle the new version of jQuery and <code>ember test</code> and <code>ember server</code> are not working because of that. See StackOverflow topic related to that issue: <a href=\"http://stackoverflow.com/questions/34702284/getting-uncaught-error-assertion-failed-ember-views-require-jquery-between-1\">link</a>. The solution from SO answer:</p>\n<blockquote>\n  <p>For now you can change the following line in your <code>bower.json</code> file. Then run <code>bower install</code> and it should work.\n  <code>\\\"jquery\\\": \\\"^1.11.3\\\"</code>, to <code>\\\"jquery\\\": \\\"1.11.3\\\"</code></p>\n</blockquote>\n<p>After we installed all our dependencies we need to check if everything is working. In order to do this, run:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">ember t</span>\n</code></pre>\n<p><code>ember t</code> is a shortcut for <code>ember test</code>.</p>\n<p>If everything is fine, you'll see the result of successfuly passed tests.</p>\n<p>Ok, so we're ready to move forward. We need to obtain the third party library. Usually, this can be done by using the power of <a href=\"http://bower.io/\">Bower</a>, but at the moment of writing, [WebFontLoader][wfl] is still <strong>not</strong> using <a href=\"http://bower.io/\">Bower</a>, according to their <a href=\"https://github.com/typekit/webfontloader/issues/302\">issue tracker</a>, so we need to download the library from their release page, or via a <a href=\"https://github.com/typekit/webfontloader/raw/master/webfontloader.js\">direct link</a> and put it to <code>/vendor/</code> folder.</p>\n<p>The steps for adding a bower dependency are not yet covered here, but they will be as soon as WebFontLoader team releases it there.</p>\n<h2 id=\"configuringaddon\">Configuring Addon</h2>\n<p>Next step is to tell what should be included into Ember app, after the addon is installed. To do this, we need to use our <code>/index.js</code> file which is an entrance point of our addon.</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// ember-cli-webfontloader/index.js</span>\n<span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;ember-cli-webfontloader&#x27;</span>,\n\n    <span class=\"hljs-title function_\">included</span>(<span class=\"hljs-params\">app</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_super</span>.<span class=\"hljs-title function_\">included</span>(app);\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">app</span>.<span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&#x27;vendor/webfontloader.js&#x27;</span>, {\n            <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;vendor&#x27;</span>\n        });\n    }\n\n};\n</code></pre>\n<p>As our library is external and it is using one single global variable, JSHint will either complain about using unassigned variable or we need to write in all our files <code>/* globals WebFont: true */</code>. To avoid both cases we need somehow make this variable exportable by using module system from ES6. To do this we need create a shim file, let's say, in <code>/vendor/webfontloader.shim.js</code> with the following structure:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// vendor/webfontloader.shim.js</span>\n<span class=\"hljs-comment\">/* globals WebFont */</span>\n<span class=\"hljs-meta\">\n&#x27;use strict&#x27;</span>;\n\n<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-string\">&#x27;webfontloader&#x27;</span>, [], <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-string\">&#x27;default&#x27;</span>: <span class=\"hljs-title class_\">WebFont</span> };\n});\n</code></pre>\n<p>After doing that we have to update <code>/index.js</code> and include our shim file and mark it as exporable:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// ember-cli-webfontloader/index.js</span>\n...\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_super</span>.<span class=\"hljs-title function_\">included</span>(app);\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">app</span>.<span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&#x27;vendor/webfontloader.js&#x27;</span>);\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">app</span>.<span class=\"hljs-title function_\">import</span>(<span class=\"hljs-string\">&#x27;vendor/webfontloader.shim.js&#x27;</span>, {\n         <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&#x27;vendor&#x27;</span>,\n   <span class=\"hljs-attr\">exports</span>: { <span class=\"hljs-string\">&#x27;webfontloader&#x27;</span>: [<span class=\"hljs-string\">&#x27;default&#x27;</span>] }\n        }\n...\n</code></pre>\n<p>Alright, now we can start with implementing features we outlined earlier.</p>\n<p>Usually, we need to load fonts only once and to do so in the first place, after an application is loaded. Therefore we're probably gonna use <code>initializer</code>, Ember's framework part, that allows you to do stuff as your app boots. If you're not familiar with them, please check <a href=\"https://guides.emberjs.com/v2.1.0/applications/initializers/\">Ember's guide</a>.</p>\n<p>So, let's create an initializer by running:</p>\n<pre><code class=\"hljs\">ember g initializer ember-<span class=\"hljs-keyword\">cli</span>-webfontloader\n</code></pre>\n<p>This will create 3 files: initializer file, test file, and one for being inserted as an initializer to the actual app. We need only the first one, where we should keep all our logic.</p>\n<p>Here's how the initializer will look like:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// app/initializers/ember-cli-webfontloader.js</span>\n<span class=\"hljs-comment\">// Let&#x27;s keep our configuration in the main configuration file</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Ember</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ember&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-variable constant_\">ENV</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../config/environment&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">WebFont</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;webfontloader&#x27;</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">initialize</span>(<span class=\"hljs-params\"></span>) {\n <span class=\"hljs-comment\">// Checking configuration for webFontConfig</span>\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable constant_\">ENV</span>, <span class=\"hljs-string\">&#x27;webFontConfig&#x27;</span>)) {\n        <span class=\"hljs-keyword\">return</span>;\n    }\n\n <span class=\"hljs-comment\">// Getting all font families that should be loaded from</span>\n    <span class=\"hljs-comment\">// configuration</span>\n    <span class=\"hljs-keyword\">let</span> config = <span class=\"hljs-title class_\">Ember</span>.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-variable constant_\">ENV</span>, <span class=\"hljs-string\">&#x27;webFontConfig&#x27;</span>);\n\n <span class=\"hljs-comment\">// If there are families, we need to load them</span>\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(config).<span class=\"hljs-property\">length</span>) {\n        <span class=\"hljs-title class_\">WebFont</span>.<span class=\"hljs-title function_\">load</span>(config);\n    }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;ember-cli-webfontloader&#x27;</span>,\n    initialize\n};\n</code></pre>\n<p>That's all we need here to do. We check config, get font-families that we want to load, and load them. Now we can mark our first bullet as done.</p>\n<h3 id=\"installingandsanitychecking\">Installing and Sanity Checking</h3>\n<p>So now we need to install our addon to check how it's working:</p>\n<pre><code class=\"hljs\">ember install ember-<span class=\"hljs-keyword\">cli</span>-webfontloader\n</code></pre>\n<p>In order to check if our addon is working with a real app, Ember CLI creates a folder called <code>dummy</code> which is created specifically for that and is served, when we use <code>ember server</code> command. So running <code>install</code> command will install our addon to the dummy application.</p>\n<p>After we configure our dummy app to use some font-families:</p>\n<pre class=\"javascript language-javascript\"><code class=\"hljs javascript language-javascript\"><span class=\"hljs-comment\">// config/environment.js</span>\n<span class=\"hljs-meta\">&#x27;use strict&#x27;</span>;\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">webFontConfig</span>: {\n            <span class=\"hljs-attr\">google</span>: {\n                <span class=\"hljs-attr\">families</span>: [<span class=\"hljs-string\">&#x27;Roboto Mono&#x27;</span>]\n            }\n        }\n    };\n};\n</code></pre>\n<p>Also we need to update the css file:</p>\n<pre class=\"css language-css\"><code class=\"hljs css language-css\"><span class=\"hljs-comment\">/* ember-cli-webfontloader/tests/dummy/app/styles/app.css */</span>\n\n<span class=\"hljs-selector-tag\">html</span> {\n    <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">&#x27;Roboto Mono&#x27;</span>\n}\n</code></pre>\n<p>Now we can start our app and see if it works:</p>\n<pre><code class=\"hljs\"><span class=\"hljs-attribute\">ember serve</span>\n</code></pre>\n<p>If we navigate to <code>localhost:4200</code>, you will see, that it displays <code>Welcome to Ember</code> written with Roboto Mono font.</p>\n<p>So now you have already working addon, which can do something useful. In the next part, I will try to cover by solving problem #2 (working with events) how we can inject services, some other techniques of how we can improve structure and independence of our current version.</p>\n<h2 id=\"links\">Links</h2>\n<ul>\n<li>[WebFontLoader - GitHub][wfl]</li>\n<li><a href=\"http://ember-cli.com/extending/#developing-addons-and-blueprints\">Ember CLI - Developing addons and blueprints</a></li>\n<li><a href=\"https://gist.github.com/kristianmandrup/ae3174217f68a6a51ed5#file-converting-libraries-to-ember-cli-addons-md\">Converting libraries to Ember CLI addons</a></li>\n<li><a href=\"http://johnotander.com/ember/2014/12/14/creating-an-emberjs-addon-with-the-ember-cli/\">Creating an Ember.js Addon With the Ember CLI</a></li>\n</ul>\n<p>[post]: https://kuzzmi.com/blog/web-fonts-webfontloader-and-ember \\\"Web Fonts, WebFontLoader and Ember | Blog | Igor Kuzmenko\\\"\n[wfl]: https://github.com/typekit/webfontloader \\\"WebFontLoader - GitHub\\\"\n[ecli]: http://ember-cli.com \\\"Ember CLI\\\"</p>","type":"blog","meta":{"slug":"creating-ember-cli-addon-with-external-library-part-1","title":"Creating Ember CLI Addon with External Library. Part 1","layout":"post","lang":"en","description":"In this post I'll try to describe a step-by-step creation of Ember CLI addon for wrapping an external library, covering just basics that will allow you to wrap your favorite libraries and reuse them in Ember.\n","tags":["technology","ember","tutorial","javascript"],"date":"2016-02-15 16:50:36 +0200"}},"_nextI18Next":{"initialI18nStore":{"ua":{"common":{"common":{"name":"Ігор Кузьменко","version":"версія","articleFooter":"Сподобалась стаття? На чай можна лишити <a href=\"https://fundof.me/kuzzmi?tip\" target=\"_blank\" rel=\"noreferrer\">ось тут</a> 😉","articleNotAvailable":"Цей контент доступний тільки англійською мовою."},"menu":{"home":"Головна","blog":"Технічні статті","thoughts":"Роздуми","podcast":"Подкаст","projects":"Проєкти","about":"Про мене"},"home":{"meta":{"description":"Домашня сторінка Ігора Кузьменка"},"bio":"розробник та tech підприємець","read":"Читати","recents":"Останні дописи","description":{"part_1":"Тут я публікую ","part_2":"свої роздуми","part_3":" і ","part_4":" технічні статті","part_5":". Завзятий користувач Linux і vim. Співзасновник в "}},"blog":{"description":"Знахідки і всілякі цікавості, якими я захотів поділитися зі світом."},"thoughts":{"description":"Мої роздуми про життя і роботу."},"about":{"body":"Привіт, мене звуть Ігор Кузьменко. Я люблю свою жінку, сина, собаку та кота. А ще я люблю вигадувати різні штукенції і втілювати їх у життя (інколи це вдається, але частіше - ні).<br /><br />Достатньо довго моя персональна сторінка була схожа на резюме із купою кліше, мені це набридло і я перетворив її на щось, що більше схоже на мене і мій підхід до життя: поєднання легкості, естетики, деякої серйозності і гумору (і скромності).<br /><br />У вільний від роботи час я проводжу з родиною, займаюся пет-проєктами, граю у відео ігри і ще багато чого роблю: від гри на укулєлє і малювання, до електротехніки і спортивного керування автівкою.<br /><br />Я безліч разів намагався підвищити рівень своєї онлайн-присутності, проте це ніколи не триває довго 🙃<br /><br />Мої соціальні мережі і контакти доступні ось тут: <a href=\"https://fundof.me/igor\">fundof.me/igor</a>"},"tags":{"philosophy":"філософія","psychology":"психологія","story":"моя історія","marketing":"маркетинг","startup":"стартапи","bad advice":"шкідливі поради","career":"кар'єра","work":"робота","burn out":"вигоряння"}}},"en":{"common":{"common":{"name":"Igor Kuzmenko","version":"version","articleFooter":"If you enjoyed the reading, you can tip me <a href=\"https://fundof.me/kuzzmi?tip\" target=\"_blank\" rel=\"noreferrer\">here</a> 😉","articleNotAvailable":"This content is available only in Ukrainian."},"menu":{"home":"Home","blog":"Tech articles","thoughts":"Thoughts","podcast":"Podcast","projects":"Projects","about":"About me"},"home":{"meta":{"description":"Home page of Igor Kuzmenko"},"bio":"developer and tech entrepreneur","read":"Read","recents":"Recent publications","description":{"part_1":"Here I publish ","part_2":"my thoughts","part_3":" and ","part_4":" tech articles","part_5":". Avid Linux and vim user. Co-founder at "}},"blog":{"description":"Different findings in the tech world that I want to share with world."},"thoughts":{"description":"My thoughts about life and work in Ukrainian."},"about":{"body":"Hi 👋<br /><br />My name is Igor Kuzmenko. I love my wife, son, dog and cat. And I love making things up and making them real (but more often this doesn't happen).<br /><br />For a long time, my personal page seemed like an official paper with a bunch of clichés, so I got sick of it and turned it into something what feels more like me and my approach to life: a combination of lightness, aesthetics, some seriousness and humor (and modesty).<br /><br />I spend my spare time with my family, doing pet projects, playing video games and more: from playing the ukulele and drawing, to electrical engineering and sports car driving.<br /><br />I've tried countless times to increase my online presence, but it never lasts long 🙃<br /><br />My social networks and contacts are available here: <a href=\"https://fundof.me/igor\">fundof.me/igor</a>"}}}},"initialLocale":"ua","userConfig":{"i18n":{"defaultLocale":"en","locales":["en","ua"]},"default":{"i18n":{"defaultLocale":"en","locales":["en","ua"]}}}}},"__N_SSG":true}