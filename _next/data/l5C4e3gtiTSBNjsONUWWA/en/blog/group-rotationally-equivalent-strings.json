{"pageProps":{"post":{"html":"<p>Recently I have found a problem about grouping together rotationally equivalent words from a given array of words. Originally author said that it was given by Google, but who knows for sureâ€¦ Anyways, at the moment I'm solving these type of things every evening, so why just not to solve this one.</p>\n<p>Quoting the anonymous author:</p>\n<blockquote>\n  <p>Definition: we say that two words are rotationally equivalent if there exists an integer such that adding this integer to every character of the first word gives the second word. Example : \"a\" and \"b\" are rotationally equivalent (adding 1 to \"a\" gives b \"abcd\" and \"cdef\" are rotationally equivalent (adding 2 to each character gives \"cdef\")\n  Question : given a list of strings, group them by if they are rotationally equivalent. Example : [\"a\", \"b\", \"cdef\", \"wtf\", \"abcd\"] -&gt; [[\"a\", \"b\"], [\"wtf\"], [\"cdef\", \"abcd\"]]</p>\n</blockquote>\n<p>The first solution that came to my mind was pretty straightforward:</p>\n<ol>\n<li>We iterationally take the first word and iterate through the rest of the array.</li>\n<li>We take the first \"rotationally equivalent\".</li>\n<li>Group first pair with another array and push them to result.</li>\n<li>We need to take them away from the original array, because we care about only one pair (probably I'm wrong, but that's a bit ambiguous here)</li>\n<li>We decrement the first iterator as we just took away current word and repeat the steps 1-4 until we end up with a list of non rotationally equivalent items.</li>\n<li>We wrap every item with another array and append them to the resulting array.</li>\n<li>Voila!</li>\n</ol>\n<pre><code class=\"hljs\"><span class=\"hljs-comment\">// We will reuse this often, so why not to extract to a function?</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">rotateChar</span>(<span class=\"hljs-params\">c, n</span>) {\n    <span class=\"hljs-keyword\">return</span> String.<span class=\"hljs-built_in\">fromCharCode</span>(c.charCodeAt(<span class=\"hljs-number\">0</span>) + n);\n}\n\n<span class=\"hljs-comment\">// Basically bruteforce checking</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isRotEq</span>(<span class=\"hljs-params\">str1, str2</span>) {\n    <span class=\"hljs-keyword\">var</span> diff = str2.charCodeAt(<span class=\"hljs-number\">0</span>) - str1.charCodeAt(<span class=\"hljs-number\">0</span>),\n        i = <span class=\"hljs-number\">0</span>;\n\n    <span class=\"hljs-keyword\">if</span> (diff &lt; <span class=\"hljs-number\">0</span>) {\n        <span class=\"hljs-keyword\">return</span> isRotEq(str2, str1);\n    }\n\n    <span class=\"hljs-keyword\">if</span> (diff &gt; <span class=\"hljs-number\">0</span> &amp;&amp; str1.<span class=\"hljs-built_in\">length</span> === str2.<span class=\"hljs-built_in\">length</span>) {\n        <span class=\"hljs-keyword\">while</span> (i &lt; str1.<span class=\"hljs-built_in\">length</span>) {\n            <span class=\"hljs-keyword\">if</span> (str2[i] !== rotateChar(str1[i], diff)) {\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n            }\n            i++;\n        }\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n\n<span class=\"hljs-comment\">// And grouping</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">group</span>(<span class=\"hljs-params\">arr</span>) {\n    <span class=\"hljs-keyword\">var</span> result = [];\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; arr.<span class=\"hljs-built_in\">length</span>; i++) {\n        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> j = i + <span class=\"hljs-number\">1</span>; j &lt; arr.<span class=\"hljs-built_in\">length</span>; j++) {\n            <span class=\"hljs-keyword\">if</span> (isRotEq(arr[i], arr[j])) {\n                result.<span class=\"hljs-built_in\">push</span>([arr[i], arr[j]]);\n                <span class=\"hljs-comment\">// To not look for used pair</span>\n                arr.<span class=\"hljs-built_in\">splice</span>(j, <span class=\"hljs-number\">1</span>);\n                arr.<span class=\"hljs-built_in\">splice</span>(i, <span class=\"hljs-number\">1</span>);\n                <span class=\"hljs-comment\">// Going one step back as the current [i] is removed now</span>\n                i--;\n                <span class=\"hljs-keyword\">break</span>;\n            }\n        }\n    }\n\n    arr.forEach(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">a</span>) {\n        result.<span class=\"hljs-built_in\">push</span>([a]);\n    });\n\n    <span class=\"hljs-keyword\">return</span> result;\n}\n\ngroup([<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;cdef&quot;</span>, <span class=\"hljs-string\">&quot;wtf&quot;</span>, <span class=\"hljs-string\">&quot;abcd&quot;</span>]);\n</code></pre>\n<p>This will return us <code>[ [\"a\", \"b\"], [\"cdef\", \"abcd\"], [ \"wtf\" ] ]</code>. Done.</p>\n<p>I will appreciate any feedback, if someone finds more elegant solution for that, or finds any issues with what I've done.</p>","type":"blog","meta":{"slug":"group-rotationally-equivalent-strings","title":"Group rotationally equivalent strings","layout":"post","lang":"en","description":"Found a problem about grouping together rotationally equivalent words from a given array of words\n","tags":["technology","problems solving","javascript"],"date":"2016-01-18 21:09:43 +0200"}},"_nextI18Next":{"initialI18nStore":{"en":{"common":{"common":{"name":"Igor Kuzmenko","version":"version","articleFooter":"If you enjoyed the reading, you can tip me <a href=\"https://fundof.me/kuzzmi?tip\" target=\"_blank\" rel=\"noreferrer\">here</a> ðŸ˜‰","articleNotAvailable":"This content is available only in Ukrainian."},"menu":{"home":"Home","blog":"Tech articles","thoughts":"Thoughts","podcast":"Podcast","projects":"Projects","about":"About me"},"home":{"meta":{"description":"Home page of Igor Kuzmenko"},"bio":"developer and tech entrepreneur","read":"Read","recents":"Recent publications","description":{"part_1":"Here I publish ","part_2":"my thoughts","part_3":" and ","part_4":" tech articles","part_5":". Avid Linux and vim user. Co-founder at "}},"blog":{"description":"Different findings in the tech world that I want to share with world."},"thoughts":{"description":"My thoughts about life and work in Ukrainian."},"about":{"body":"Hi ðŸ‘‹<br /><br />My name is Igor Kuzmenko. I love my wife, son, dog and cat. And I love making things up and making them real (but more often this doesn't happen).<br /><br />For a long time, my personal page seemed like an official paper with a bunch of clichÃ©s, so I got sick of it and turned it into something what feels more like me and my approach to life: a combination of lightness, aesthetics, some seriousness and humor (and modesty).<br /><br />I spend my spare time with my family, doing pet projects, playing video games and more: from playing the ukulele and drawing, to electrical engineering and sports car driving.<br /><br />I've tried countless times to increase my online presence, but it never lasts long ðŸ™ƒ<br /><br />My social networks and contacts are available here: <a href=\"https://fundof.me/igor\">fundof.me/igor</a>"}}}},"initialLocale":"en","userConfig":{"i18n":{"defaultLocale":"en","locales":["en","ua"]},"default":{"i18n":{"defaultLocale":"en","locales":["en","ua"]}}}}},"__N_SSG":true}