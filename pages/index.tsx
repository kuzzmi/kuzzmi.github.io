import React from "react";
import Head from "next/head";
import Link from "next/link";
// import Image from "next/image";
import yaml from "yaml";
import styles from "../styles/Home.module.css";
import fs from "fs";
import { Converter /* , Metadata */ } from "showdown";

export default function Home({ posts }) {
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <div className={styles.summary}>
        <h1 className={styles.title}>Igor Kuzmenko</h1>
        <p className={styles.subtitle}>developer and tech entrepreneur</p>

        <p>
          Here I write about <a>philosophy (not in English)</a> and{" "}
          <a>technology</a>. Avid Linux and vim user. Co-founder at{" "}
          <a>Fundof</a>.
        </p>
      </div>

      <div className={styles.recents}>
        <h6>Recent publications:</h6>
        {posts.map((p) => (
          <div className={styles.post}>
            <Link href={`/${p.slug}`} key={p.slug}>
              <a className={styles.postTitle}>
                <h2>{p.title}</h2>
              </a>
            </Link>
            <p>
              {p.tags.map((t) => (
                <Link href={`/${p.slug}`} key={t}>
                  <a className={styles.tag}>
                    <small>
                      <i>{t}</i>
                    </small>
                  </a>
                </Link>
              ))}
            </p>
            <p className={styles.description}>
              <small>{p.description}</small>
            </p>
            <Link href={`/${p.slug}`}>
              <a>
                <small>Read â†’</small>
              </a>
            </Link>
          </div>
        ))}
      </div>
    </>
  );
}

export function getStaticProps() {
  const files = fs.readdirSync("posts");
  const posts = files.reverse().map((file) => {
    const post = file.slice(0, file.indexOf(".md"));
    const slug = post.slice(4);
    const content = fs.readFileSync(`posts/${post}.md`, "utf8");
    const converter = new Converter({ metadata: true });
    converter.makeHtml(content);
    const metaRaw = converter.getMetadata(true) as string;
    const meta = yaml.parse(metaRaw);
    console.log(meta);
    return {
      slug,
      title: meta.title,
      layout: meta.layout,
      description: meta.description || "",
      tags: Array.isArray(meta.tags) ? meta.tags : [meta.tags],
      date: meta.date,
    };
  });
  return {
    props: {
      posts,
    },
  };
}
